{
  "id": 0,
  "name": "typedoc",
  "variant": "project",
  "kind": 1,
  "flags": {},
  "children": [
    {
      "id": 1,
      "name": "function",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 80,
          "name": "merged",
          "variant": "declaration",
          "kind": 4,
          "flags": {},
          "children": [
            {
              "id": 81,
              "name": "nsFn",
              "variant": "declaration",
              "kind": 64,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 305,
                  "character": 7,
                  "url": "typedoc://function.ts#L305"
                }
              ],
              "signatures": [
                {
                  "id": 82,
                  "name": "nsFn",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 305,
                      "character": 14,
                      "url": "typedoc://function.ts#L305"
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Functions",
              "children": [
                81
              ]
            }
          ],
          "sources": [
            {
              "fileName": "function.ts",
              "line": 304,
              "character": 16,
              "url": "typedoc://function.ts#L304"
            },
            {
              "fileName": "function.ts",
              "line": 305,
              "character": 0,
              "url": "typedoc://function.ts#L305"
            }
          ]
        },
        {
          "id": 55,
          "name": "moduleFunction",
          "variant": "declaration",
          "kind": 4,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "This is the module extending the function moduleFunction()."
              }
            ]
          },
          "children": [
            {
              "id": 60,
              "name": "functionVariable",
              "variant": "declaration",
              "kind": 32,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This variable is appended to a function."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 264,
                  "character": 15,
                  "url": "typedoc://function.ts#L264"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 56,
              "name": "append",
              "variant": "declaration",
              "kind": 64,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 269,
                  "character": 20,
                  "url": "typedoc://function.ts#L269"
                }
              ],
              "signatures": [
                {
                  "id": 57,
                  "name": "append",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This function is appended to another function."
                      }
                    ]
                  },
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 269,
                      "character": 4,
                      "url": "typedoc://function.ts#L269"
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ]
            },
            {
              "id": 58,
              "name": "prepend",
              "variant": "declaration",
              "kind": 64,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 274,
                  "character": 20,
                  "url": "typedoc://function.ts#L274"
                }
              ],
              "signatures": [
                {
                  "id": 59,
                  "name": "prepend",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This function is appended to another function."
                      }
                    ]
                  },
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 274,
                      "character": 4,
                      "url": "typedoc://function.ts#L274"
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Variables",
              "children": [
                60
              ]
            },
            {
              "title": "Functions",
              "children": [
                56,
                58
              ]
            }
          ],
          "sources": [
            {
              "fileName": "function.ts",
              "line": 218,
              "character": 16,
              "url": "typedoc://function.ts#L218"
            },
            {
              "fileName": "function.ts",
              "line": 260,
              "character": 14,
              "url": "typedoc://function.ts#L260"
            }
          ]
        },
        {
          "id": 86,
          "name": "Predicates",
          "variant": "declaration",
          "kind": 128,
          "flags": {},
          "children": [
            {
              "id": 93,
              "name": "constructor",
              "variant": "declaration",
              "kind": 512,
              "flags": {},
              "signatures": [
                {
                  "id": 94,
                  "name": "new Predicates",
                  "variant": "signature",
                  "kind": 16384,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 86,
                    "name": "Predicates",
                    "package": "typedoc"
                  }
                }
              ]
            },
            {
              "id": 97,
              "name": "assertString",
              "variant": "declaration",
              "kind": 2048,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 285,
                  "character": 4,
                  "url": "typedoc://function.ts#L285"
                }
              ],
              "signatures": [
                {
                  "id": 98,
                  "name": "assertString",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 285,
                      "character": 4,
                      "url": "typedoc://function.ts#L285"
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "this",
                    "asserts": true,
                    "targetType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ]
            },
            {
              "id": 95,
              "name": "isString",
              "variant": "declaration",
              "kind": 2048,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 281,
                  "character": 4,
                  "url": "typedoc://function.ts#L281"
                }
              ],
              "signatures": [
                {
                  "id": 96,
                  "name": "isString",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 281,
                      "character": 4,
                      "url": "typedoc://function.ts#L281"
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "this",
                    "asserts": false,
                    "targetType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ]
            },
            {
              "id": 90,
              "name": "assert",
              "variant": "declaration",
              "kind": 2048,
              "flags": {
                "isStatic": true
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 284,
                  "character": 11,
                  "url": "typedoc://function.ts#L284"
                }
              ],
              "signatures": [
                {
                  "id": 91,
                  "name": "assert",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 284,
                      "character": 4,
                      "url": "typedoc://function.ts#L284"
                    }
                  ],
                  "parameters": [
                    {
                      "id": 92,
                      "name": "x",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "x",
                    "asserts": true
                  }
                }
              ]
            },
            {
              "id": 87,
              "name": "isString",
              "variant": "declaration",
              "kind": 2048,
              "flags": {
                "isStatic": true
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 278,
                  "character": 11,
                  "url": "typedoc://function.ts#L278"
                }
              ],
              "signatures": [
                {
                  "id": 88,
                  "name": "isString",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 278,
                      "character": 4,
                      "url": "typedoc://function.ts#L278"
                    }
                  ],
                  "parameters": [
                    {
                      "id": 89,
                      "name": "x",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "x",
                    "asserts": false,
                    "targetType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "children": [
                93
              ]
            },
            {
              "title": "Methods",
              "children": [
                97,
                95,
                90,
                87
              ]
            }
          ],
          "sources": [
            {
              "fileName": "function.ts",
              "line": 277,
              "character": 13,
              "url": "typedoc://function.ts#L277"
            }
          ]
        },
        {
          "id": 99,
          "name": "all",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 293,
              "character": 13,
              "url": "typedoc://function.ts#L293"
            }
          ],
          "signatures": [
            {
              "id": 100,
              "name": "all",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Returns true if fn returns true for every item in the iterator\n\nReturns true if the iterator is empty"
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 294,
                  "character": 4,
                  "url": "typedoc://function.ts#L294"
                }
              ],
              "typeParameter": [
                {
                  "id": 101,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 102,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 103,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 294,
                          "character": 12,
                          "url": "typedoc://function.ts#L294"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 104,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 294,
                              "character": 12,
                              "url": "typedoc://function.ts#L294"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 105,
                              "name": "item",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "id": 106,
                  "name": "iterator",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "name": "T"
                      }
                    ],
                    "name": "Iterable",
                    "package": "typescript"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 107,
              "name": "all",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Returns true if fn returns true for every item in the iterator\n\nReturns true if the iterator is empty"
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 295,
                  "character": 4,
                  "url": "typedoc://function.ts#L295"
                }
              ],
              "typeParameter": [
                {
                  "id": 108,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 109,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 110,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 295,
                          "character": 12,
                          "url": "typedoc://function.ts#L295"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 111,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 295,
                              "character": 12,
                              "url": "typedoc://function.ts#L295"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 112,
                              "name": "item",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "name": "T"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 113,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 295,
                      "character": 35,
                      "url": "typedoc://function.ts#L295"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 114,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 295,
                          "character": 35,
                          "url": "typedoc://function.ts#L295"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 115,
                          "name": "iterator",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "name": "T"
                              }
                            ],
                            "name": "Iterable",
                            "package": "typescript"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 67,
          "name": "assertIsNonNull",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 241,
              "character": 16,
              "url": "typedoc://function.ts#L241"
            }
          ],
          "signatures": [
            {
              "id": 68,
              "name": "assertIsNonNull",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Asserts that an argument is not null."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 241,
                  "character": 0,
                  "url": "typedoc://function.ts#L241"
                }
              ],
              "typeParameter": [
                {
                  "id": 69,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 70,
                  "name": "arg",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      },
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "reference",
                        "name": "T"
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "arg",
                "asserts": true,
                "targetType": {
                  "type": "reference",
                  "name": "T"
                }
              }
            }
          ]
        },
        {
          "id": 61,
          "name": "assertionFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 227,
              "character": 16,
              "url": "typedoc://function.ts#L227"
            }
          ],
          "signatures": [
            {
              "id": 62,
              "name": "assertionFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is an assertion function."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 227,
                  "character": 0,
                  "url": "typedoc://function.ts#L227"
                }
              ],
              "parameters": [
                {
                  "id": 63,
                  "name": "condition",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "The condition that is asserted to be true when this function returns."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "condition",
                "asserts": true
              }
            }
          ]
        },
        {
          "id": 75,
          "name": "boolOrUndef",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 298,
              "character": 16,
              "url": "typedoc://function.ts#L298"
            }
          ],
          "signatures": [
            {
              "id": 76,
              "name": "boolOrUndef",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 298,
                  "character": 0,
                  "url": "typedoc://function.ts#L298"
                }
              ],
              "parameters": [
                {
                  "id": 77,
                  "name": "x",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 64,
          "name": "checkerFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 233,
              "character": 16,
              "url": "typedoc://function.ts#L233"
            }
          ],
          "signatures": [
            {
              "id": 65,
              "name": "checkerFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Assertion function with a type."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 233,
                  "character": 0,
                  "url": "typedoc://function.ts#L233"
                }
              ],
              "parameters": [
                {
                  "id": 66,
                  "name": "anything",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "anything",
                "asserts": false,
                "targetType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            }
          ]
        },
        {
          "id": 2,
          "name": "exportedFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 4,
              "character": 16,
              "url": "typedoc://function.ts#L4"
            }
          ],
          "signatures": [
            {
              "id": 3,
              "name": "exportedFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a simple exported function."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 4,
                  "character": 0,
                  "url": "typedoc://function.ts#L4"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 23,
          "name": "functionWithADestructuredParameter",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 100,
              "character": 16,
              "url": "typedoc://function.ts#L100"
            }
          ],
          "signatures": [
            {
              "id": 24,
              "name": "functionWithADestructuredParameter",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with a destructured parameter."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 100,
                  "character": 0,
                  "url": "typedoc://function.ts#L100"
                }
              ],
              "parameters": [
                {
                  "id": 25,
                  "name": "destructuredParam",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This is the parameter that is destructured."
                      }
                    ]
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 26,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "children": [
                        {
                          "id": 29,
                          "name": "paramA",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "comment": {
                            "summary": [
                              {
                                "kind": "text",
                                "text": "This is a **parameter** pointing to an interface.\n\n  "
                              },
                              {
                                "kind": "code",
                                "text": "```\n  const value:BaseClass = new BaseClass('test');\n  functionWithArguments('arg', 0, value);\n  ```"
                              }
                            ]
                          },
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 107,
                              "character": 4,
                              "url": "typedoc://function.ts#L107"
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "name": "Object",
                            "package": "typescript"
                          }
                        },
                        {
                          "id": 28,
                          "name": "paramG",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "comment": {
                            "summary": [
                              {
                                "kind": "text",
                                "text": "This is a parameter flagged with any.\n    This sentence is placed in the next line."
                              }
                            ]
                          },
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 106,
                              "character": 4,
                              "url": "typedoc://function.ts#L106"
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        },
                        {
                          "id": 27,
                          "name": "paramZ",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "comment": {
                            "summary": [
                              {
                                "kind": "text",
                                "text": "This is a string parameter."
                              }
                            ]
                          },
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 105,
                              "character": 4,
                              "url": "typedoc://function.ts#L105"
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "children": [
                            29,
                            28,
                            27
                          ]
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 104,
                          "character": 3,
                          "url": "typedoc://function.ts#L104"
                        }
                      ]
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 38,
          "name": "functionWithADestructuredParameterAndAnExtraParamDirective",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 166,
              "character": 16,
              "url": "typedoc://function.ts#L166"
            }
          ],
          "signatures": [
            {
              "id": 39,
              "name": "functionWithADestructuredParameterAndAnExtraParamDirective",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with a destructured parameter and an extra "
                  },
                  {
                    "kind": "code",
                    "text": "`@param`"
                  },
                  {
                    "kind": "text",
                    "text": " directive with no corresponding parameter.\nThe "
                  },
                  {
                    "kind": "code",
                    "text": "`@param`"
                  },
                  {
                    "kind": "text",
                    "text": " directives are ignored because we cannot be certain which corresponds to the real parameter."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 166,
                  "character": 0,
                  "url": "typedoc://function.ts#L166"
                }
              ],
              "parameters": [
                {
                  "id": 40,
                  "name": "__namedParameters",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 41,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "children": [
                        {
                          "id": 44,
                          "name": "paramA",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 173,
                              "character": 4,
                              "url": "typedoc://function.ts#L173"
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "name": "Object",
                            "package": "typescript"
                          }
                        },
                        {
                          "id": 43,
                          "name": "paramG",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 172,
                              "character": 4,
                              "url": "typedoc://function.ts#L172"
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        },
                        {
                          "id": 42,
                          "name": "paramZ",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 171,
                              "character": 4,
                              "url": "typedoc://function.ts#L171"
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "children": [
                            44,
                            43,
                            42
                          ]
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 170,
                          "character": 3,
                          "url": "typedoc://function.ts#L170"
                        }
                      ]
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 30,
          "name": "functionWithADestructuredParameterAndExtraParameters",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 131,
              "character": 16,
              "url": "typedoc://function.ts#L131"
            }
          ],
          "signatures": [
            {
              "id": 31,
              "name": "functionWithADestructuredParameterAndExtraParameters",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with a destructured parameter and additional undocumented parameters.\nThe "
                  },
                  {
                    "kind": "code",
                    "text": "`@param`"
                  },
                  {
                    "kind": "text",
                    "text": " directives are ignored because we cannot be certain which parameter they refer to."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 131,
                  "character": 0,
                  "url": "typedoc://function.ts#L131"
                }
              ],
              "parameters": [
                {
                  "id": 32,
                  "name": "__namedParameters",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 33,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "children": [
                        {
                          "id": 36,
                          "name": "paramA",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 139,
                              "character": 8,
                              "url": "typedoc://function.ts#L139"
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "name": "Object",
                            "package": "typescript"
                          }
                        },
                        {
                          "id": 35,
                          "name": "paramG",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 138,
                              "character": 8,
                              "url": "typedoc://function.ts#L138"
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        },
                        {
                          "id": 34,
                          "name": "paramZ",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 137,
                              "character": 8,
                              "url": "typedoc://function.ts#L137"
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "children": [
                            36,
                            35,
                            34
                          ]
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 136,
                          "character": 7,
                          "url": "typedoc://function.ts#L136"
                        }
                      ]
                    }
                  }
                },
                {
                  "id": 37,
                  "name": "extraParameter",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 13,
          "name": "functionWithDefaults",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 62,
              "character": 16,
              "url": "typedoc://function.ts#L62"
            }
          ],
          "signatures": [
            {
              "id": 14,
              "name": "functionWithDefaults",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with a parameter that has a default value."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 62,
                  "character": 0,
                  "url": "typedoc://function.ts#L62"
                }
              ],
              "parameters": [
                {
                  "id": 15,
                  "name": "valueA",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default string value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  "defaultValue": "\"defaultValue\""
                },
                {
                  "id": 16,
                  "name": "valueB",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default numeric value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "defaultValue": "100"
                },
                {
                  "id": 17,
                  "name": "valueC",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default NaN value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "defaultValue": "Number.NaN"
                },
                {
                  "id": 18,
                  "name": "valueD",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default boolean value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  "defaultValue": "true"
                },
                {
                  "id": 19,
                  "name": "valueE",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default null value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  "defaultValue": "..."
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 9,
          "name": "functionWithOptionalValue",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 47,
              "character": 16,
              "url": "typedoc://function.ts#L47"
            }
          ],
          "signatures": [
            {
              "id": 10,
              "name": "functionWithOptionalValue",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with a parameter that is optional."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 47,
                  "character": 0,
                  "url": "typedoc://function.ts#L47"
                }
              ],
              "parameters": [
                {
                  "id": 11,
                  "name": "requiredParam",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A normal parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 12,
                  "name": "optionalParam",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "An optional parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 4,
          "name": "functionWithParameters",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 23,
              "character": 16,
              "url": "typedoc://function.ts#L23"
            }
          ],
          "signatures": [
            {
              "id": 5,
              "name": "functionWithParameters",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with multiple arguments and a return value."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 23,
                  "character": 0,
                  "url": "typedoc://function.ts#L23"
                }
              ],
              "parameters": [
                {
                  "id": 6,
                  "name": "paramZ",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This is a string parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 7,
                  "name": "paramG",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This is a parameter flagged with any.\n    This sentence is placed in the next line."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 8,
                  "name": "paramA",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This is a **parameter** pointing to an interface.\n\n  "
                      },
                      {
                        "kind": "code",
                        "text": "```\n  const value:BaseClass = new BaseClass('test');\n  functionWithArguments('arg', 0, value);\n  ```"
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "name": "Object",
                    "package": "typescript"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 20,
          "name": "functionWithRest",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 78,
              "character": 16,
              "url": "typedoc://function.ts#L78"
            }
          ],
          "signatures": [
            {
              "id": 21,
              "name": "functionWithRest",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with rest parameter."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 78,
                  "character": 0,
                  "url": "typedoc://function.ts#L78"
                }
              ],
              "parameters": [
                {
                  "id": 22,
                  "name": "rest",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {
                    "isRest": true
                  },
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "The rest parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 71,
          "name": "isNonNull",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 253,
              "character": 16,
              "url": "typedoc://function.ts#L253"
            }
          ],
          "signatures": [
            {
              "id": 72,
              "name": "isNonNull",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Checks that an argument is not null."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 253,
                  "character": 0,
                  "url": "typedoc://function.ts#L253"
                }
              ],
              "typeParameter": [
                {
                  "id": 73,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 74,
                  "name": "arg",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      },
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "reference",
                        "name": "T"
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "arg",
                "asserts": false,
                "targetType": {
                  "type": "reference",
                  "name": "T"
                }
              }
            }
          ]
        },
        {
          "id": 78,
          "name": "merged",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 304,
              "character": 16,
              "url": "typedoc://function.ts#L304"
            },
            {
              "fileName": "function.ts",
              "line": 305,
              "character": 0,
              "url": "typedoc://function.ts#L305"
            }
          ],
          "signatures": [
            {
              "id": 79,
              "name": "merged",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 304,
                  "character": 0,
                  "url": "typedoc://function.ts#L304"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 52,
          "name": "moduleFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 218,
              "character": 16,
              "url": "typedoc://function.ts#L218"
            },
            {
              "fileName": "function.ts",
              "line": 260,
              "character": 14,
              "url": "typedoc://function.ts#L260"
            }
          ],
          "signatures": [
            {
              "id": 53,
              "name": "moduleFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function that is extended by a module."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 218,
                  "character": 0,
                  "url": "typedoc://function.ts#L218"
                }
              ],
              "parameters": [
                {
                  "id": 54,
                  "name": "arg",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "An argument."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 45,
          "name": "multipleSignatures",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 183,
              "character": 16,
              "url": "typedoc://function.ts#L183"
            },
            {
              "fileName": "function.ts",
              "line": 191,
              "character": 16,
              "url": "typedoc://function.ts#L191"
            },
            {
              "fileName": "function.ts",
              "line": 201,
              "character": 16,
              "url": "typedoc://function.ts#L201"
            }
          ],
          "signatures": [
            {
              "id": 46,
              "name": "multipleSignatures",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is the first signature of a function with multiple signatures."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 183,
                  "character": 0,
                  "url": "typedoc://function.ts#L183"
                }
              ],
              "parameters": [
                {
                  "id": 47,
                  "name": "value",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "The name value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 48,
              "name": "multipleSignatures",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is the second signature of a function with multiple signatures."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 191,
                  "character": 0,
                  "url": "typedoc://function.ts#L191"
                }
              ],
              "parameters": [
                {
                  "id": 49,
                  "name": "value",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "An object containing the name value."
                      }
                    ]
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 50,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "children": [
                        {
                          "id": 51,
                          "name": "name",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "comment": {
                            "summary": [
                              {
                                "kind": "text",
                                "text": "A value of the object."
                              }
                            ]
                          },
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 191,
                              "character": 44,
                              "url": "typedoc://function.ts#L191"
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "children": [
                            51
                          ]
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 191,
                          "character": 42,
                          "url": "typedoc://function.ts#L191"
                        }
                      ]
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 83,
          "name": "variableFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 37,
              "character": 13,
              "url": "typedoc://function.ts#L37"
            }
          ],
          "signatures": [
            {
              "id": 84,
              "name": "variableFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function that is assigned to a variable."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 37,
                  "character": 32,
                  "url": "typedoc://function.ts#L37"
                }
              ],
              "parameters": [
                {
                  "id": 85,
                  "name": "someParam",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This is some numeric parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Namespaces",
          "children": [
            80,
            55
          ]
        },
        {
          "title": "Classes",
          "children": [
            86
          ]
        },
        {
          "title": "Functions",
          "children": [
            99,
            67,
            61,
            75,
            64,
            2,
            23,
            38,
            30,
            13,
            9,
            4,
            20,
            71,
            78,
            52,
            45,
            83
          ]
        }
      ],
      "sources": [
        {
          "fileName": "function.ts",
          "line": 4,
          "character": 0,
          "url": "typedoc://function.ts#L4"
        }
      ]
    },
    {
      "id": 116,
      "name": "generic-function",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 121,
          "name": "functionWithGenericArrayParameter",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "generic-function.ts",
              "line": 18,
              "character": 16,
              "url": "typedoc://generic-function.ts#L18"
            }
          ],
          "signatures": [
            {
              "id": 122,
              "name": "functionWithGenericArrayParameter",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function with a generic type array parameter."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "A generic array."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "generic-function.ts",
                  "line": 18,
                  "character": 0,
                  "url": "typedoc://generic-function.ts#L18"
                }
              ],
              "typeParameter": [
                {
                  "id": 123,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 124,
                  "name": "param",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A generic parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "name": "T"
                  }
                },
                {
                  "id": 125,
                  "name": "params",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A generic array parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "T"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "T"
                }
              }
            }
          ]
        },
        {
          "id": 126,
          "name": "functionWithTemplate",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "generic-function.ts",
              "line": 29,
              "character": 16,
              "url": "typedoc://generic-function.ts#L29"
            }
          ],
          "signatures": [
            {
              "id": 127,
              "name": "functionWithTemplate",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "generic-function.ts",
                  "line": 29,
                  "character": 0,
                  "url": "typedoc://generic-function.ts#L29"
                }
              ],
              "typeParameter": [
                {
                  "id": 128,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "this describes T"
                      }
                    ]
                  }
                }
              ],
              "parameters": [
                {
                  "id": 129,
                  "name": "param",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "this describes param"
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "name": "T"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "T"
              }
            }
          ]
        },
        {
          "id": 117,
          "name": "genericFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "generic-function.ts",
              "line": 7,
              "character": 16,
              "url": "typedoc://generic-function.ts#L7"
            }
          ],
          "signatures": [
            {
              "id": 118,
              "name": "genericFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Generic function short text."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Generic function return value."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "generic-function.ts",
                  "line": 7,
                  "character": 0,
                  "url": "typedoc://generic-function.ts#L7"
                }
              ],
              "typeParameter": [
                {
                  "id": 119,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "Generic function type parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "name": "Object",
                    "package": "typescript"
                  }
                }
              ],
              "parameters": [
                {
                  "id": 120,
                  "name": "value",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "Generic function parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "name": "T"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "T"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [
            121,
            126,
            117
          ]
        }
      ],
      "sources": [
        {
          "fileName": "generic-function.ts",
          "line": 7,
          "character": 0,
          "url": "typedoc://generic-function.ts#L7"
        }
      ]
    },
    {
      "id": 130,
      "name": "implicit-types",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 139,
          "name": "BreakpointRange",
          "variant": "declaration",
          "kind": 256,
          "flags": {},
          "children": [
            {
              "id": 141,
              "name": "end",
              "variant": "declaration",
              "kind": 1024,
              "flags": {},
              "sources": [
                {
                  "fileName": "implicit-types.ts",
                  "line": 3,
                  "character": 4,
                  "url": "typedoc://implicit-types.ts#L3"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 140,
              "name": "start",
              "variant": "declaration",
              "kind": 1024,
              "flags": {},
              "sources": [
                {
                  "fileName": "implicit-types.ts",
                  "line": 2,
                  "character": 4,
                  "url": "typedoc://implicit-types.ts#L2"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "children": [
                141,
                140
              ]
            }
          ],
          "sources": [
            {
              "fileName": "implicit-types.ts",
              "line": 1,
              "character": 17,
              "url": "typedoc://implicit-types.ts#L1"
            }
          ]
        },
        {
          "id": 131,
          "name": "getBreakpoints",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "implicit-types.ts",
              "line": 14,
              "character": 16,
              "url": "typedoc://implicit-types.ts#L14"
            }
          ],
          "signatures": [
            {
              "id": 132,
              "name": "getBreakpoints",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "implicit-types.ts",
                  "line": 14,
                  "character": 0,
                  "url": "typedoc://implicit-types.ts#L14"
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 133,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "children": [
                    {
                      "id": 136,
                      "name": "large",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 9,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L9"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 139,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    },
                    {
                      "id": 135,
                      "name": "medium",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 8,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L8"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 139,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    },
                    {
                      "id": 134,
                      "name": "small",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 7,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L7"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 139,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    },
                    {
                      "id": 137,
                      "name": "xlarge",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 10,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L10"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 139,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    },
                    {
                      "id": 138,
                      "name": "xxlarge",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 11,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L11"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 139,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "children": [
                        136,
                        135,
                        134,
                        137,
                        138
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "implicit-types.ts",
                      "line": 6,
                      "character": 18,
                      "url": "typedoc://implicit-types.ts#L6"
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Interfaces",
          "children": [
            139
          ]
        },
        {
          "title": "Functions",
          "children": [
            131
          ]
        }
      ],
      "sources": [
        {
          "fileName": "implicit-types.ts",
          "line": 1,
          "character": 0,
          "url": "typedoc://implicit-types.ts#L1"
        }
      ]
    }
  ],
  "groups": [
    {
      "title": "Modules",
      "children": [
        1,
        116,
        130
      ]
    }
  ]
}
